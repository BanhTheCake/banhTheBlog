import { BaseUser, SafeUser } from './../interfaces/user.interface';
import { PostsPagination } from './../../post/interfaces/posts.pagination.i';
import { PostService } from './../../post/services/post.service';
import { RegisterResponse } from '../interfaces/register.interface';
import { RegisterDto } from '../dto/register.dto';
import { UserService } from '../services/user.service';
import { LoginDto } from '../dto/login.dto';
import { LoginResponse } from '../interfaces/login.interface';
import { ContextType } from 'src/interfaces/global';
import { AccessTokenParams, ForgotTokenParams, RefreshTokenParams } from '../services/jwt.service';
import { UpdateDto } from '../dto/update.dto';
import { PasswordDto } from '../dto/password.dto';
import { ActiveDto } from '../dto/active.dto';
import { ForgotDto } from '../dto/forgot.dto';
import { CommonResponse } from 'src/interfaces/common.interface';
import { PostsPaginationDto } from 'src/post/dto/posts.pagination.dto';
import { RefreshTokenResponse } from '../interfaces/refreshToken.interface';
export declare class UserResolver {
    private UserService;
    private PostService;
    constructor(UserService: UserService, PostService: PostService);
    hello(): Promise<string>;
    getBaseUser(userId: string): Promise<BaseUser>;
    getDataUser(user: RefreshTokenParams): Promise<SafeUser>;
    getAllCreatedPost(data: PostsPaginationDto, user: AccessTokenParams): Promise<PostsPagination>;
    getAllFavoritePost(data: PostsPaginationDto, user: AccessTokenParams): Promise<PostsPagination>;
    register(data: RegisterDto): Promise<RegisterResponse>;
    activeAccount(data: ActiveDto): Promise<CommonResponse>;
    forgotPassword(email: string): Promise<CommonResponse>;
    changePassword(data: ForgotDto, user: ForgotTokenParams): Promise<CommonResponse>;
    login(data: LoginDto, context: ContextType): Promise<LoginResponse>;
    logout(id: string, context: ContextType): Promise<CommonResponse>;
    updateDataUser(dataUpdate: UpdateDto, user: AccessTokenParams): Promise<CommonResponse>;
    updatePassword(data: PasswordDto, user: AccessTokenParams, context: ContextType): Promise<CommonResponse>;
    refreshAccessToken(user: RefreshTokenParams, context: ContextType): Promise<RefreshTokenResponse>;
    accessToken(user: AccessTokenParams): string;
    refreshToken(user: RefreshTokenParams): string;
}
